
#include <assert.h>
#include <stdio.h>
char* strcat1(char *des,const char *src)
{
    assert((des != NULL) && (src != NULL));
    char *address = des;
    while(*des != '\0')
        ++des;
    while((*des++ = *src++) != '\0')
        ;
    return address;
}
int main(){
    char str1[30] = "i want to go ";
    char *str2 = "japan";
    printf("%s\n",strcat1(str1,str2));
    return 0;
}
#include <assert.h>
#include <stdio.h>
int strcmp1(const char *str1,const char *str2)
{
    assert((str1 != NULL) && (str2 != NULL));
    int ret = 0;
    while(!(ret = *(unsigned char *)str1 - *(unsigned char *)str2) && *str1){
        ++str1;
        ++str2;
    }
    return *str1 - *str2;
}
int strcmp2(const char *str1,const char *str2)
{
    assert((str1 != NULL) && (str2 != NULL));
    while(*str1 == *str2){
        ++str1;
        ++str2;
    }
    return *str1 - *str2;
}
int main(){
    char *str1 = "i want";
    char *str2 = "i wan";
    printf("%d\n",strcmp1(str1,str2));
    printf("%d\n",strcmp2(str1,str2));
    return 0;
}
#include <stdio.h>
#include <assert.h>
#include <string.h>
char *strcpy1(char *des,const char *src){
    assert((des != NULL) && (src != NULL));
    char *address = des;
    while((*des++ = *src++) != '\0')
        ;
    return address;
}

char *strcpy2(char *des,const char *src)
{
    assert((des != NULL) && (src != NULL));
    int size = strlen(src);
    char *pDes = NULL;
    //overlap
    if(src < des && src + size > des){
        src = src + size - 1;
        pDes = des + size - 1;
        while(size --)
            *pDes-- = *src--;
    }
    //no overlap
    else{
        pDes = des;
        while(size--)
            *pDes++ = *src++;
    }
    return pDes;
}
int main()
{
    char str[20] = "linux";
    strcpy2(str + 8,str);
}
#include <assert.h>
#include <stdio.h>
int strlen1(const char *str)
{
    assert(str != NULL);
    int len = 0;
    while((*str ++) != '\0')
        ++len;
    return len;
}
int main()
{
    /*
     *what's the difference between char * and char [] ?
     *char * will place str in read-only parts of the memory,and making str a pointer to that
     *makes any writing operation on this memory is illegal.
     *char [] puts the str in rad-only memory and copies the str to newly allocated memory on the stack.
    */
    char *str1 = "linux";
    char str2[] = "redhat";
    char str3[10] = "chinese";
    //str1[0] = 'Q'; //illegal
    str2[0] = 'Q';  //legal
    str3[8] = 'Q';  //legal
    printf("%d\n",strlen1(str1));
    printf("%d\n",strlen1(str2));
    printf("%d\n",strlen1(str3));
    return 0;
}
